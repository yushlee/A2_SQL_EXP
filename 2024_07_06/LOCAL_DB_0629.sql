-- Alias (別名) 在 SQL 上的用處。最常用到的別名有兩種： "欄位別名"及表格別名

-- "欄位別名"
-- 1.使用"雙引號"
-- 2.可省略"雙引號"但是別名中間不可以有白空
-- 3.AS可省略
SELECT STORE_NAME, SUM(SALES) "營業額加總", 
	COUNT(STORE_ID) AS COUNT_STORE,
	GROUP_CONCAT(SALES ORDER BY SALES DESC SEPARATOR '/') AS "GROUP_SALES_LIST"
FROM store_information
GROUP BY STORE_NAME;

-- 表格別名
-- 表格別名.表格欄位 AS "欄位別名"
SELECT S.STORE_ID, S.STORE_NAME AS "商店名稱"
FROM store_information S;

-- 透過WHERE的方式將兩張資料表欄位關聯(JOIN連接)在一起
SELECT S.STORE_ID, S.STORE_NAME, S.SALES, S.GEOGRAPHY_ID, G.REGION_NAME
FROM store_information S, geography G
WHERE S.GEOGRAPHY_ID = G.GEOGRAPHY_ID;

SELECT S.STORE_ID, S.STORE_NAME, S.SALES, S.GEOGRAPHY_ID, G.REGION_NAME
FROM store_information S, geography G;


-- 內部連接 (INNER JOIN...ON)
-- INNER 可省略不寫
SELECT S.STORE_ID, S.STORE_NAME, S.SALES, S.GEOGRAPHY_ID, G.REGION_NAME
FROM store_information S INNER JOIN geography G
ON S.GEOGRAPHY_ID = G.GEOGRAPHY_ID;

-- 左外部連接(LEFT JOIN or LEFT OUTER JOIN)
-- OUTER 可省略不寫
SELECT S.STORE_ID, S.STORE_NAME, S.SALES, S.GEOGRAPHY_ID, G.REGION_NAME
FROM store_information S LEFT OUTER JOIN geography G
ON S.GEOGRAPHY_ID = G.GEOGRAPHY_ID;

-- 右外部連接 (RIGHT JOIN or RIGHT OUTER JOIN)
SELECT S.STORE_ID, S.STORE_NAME, S.SALES, S.GEOGRAPHY_ID, 
	G.GEOGRAPHY_ID, G.REGION_NAME
FROM store_information S RIGHT OUTER JOIN geography G
ON S.GEOGRAPHY_ID = G.GEOGRAPHY_ID;

-- FULL OUTER JOIN (MySQL支援)
/*
SELECT S.STORE_ID, S.STORE_NAME, S.SALES, S.GEOGRAPHY_ID, 
	G.GEOGRAPHY_ID, G.REGION_NAME
FROM store_information S FULL OUTER JOIN geography G
ON S.GEOGRAPHY_ID = G.GEOGRAPHY_ID;
*/

-- 只取"左半邊未交集"的資料結果
SELECT S.STORE_ID, S.STORE_NAME, S.SALES, S.GEOGRAPHY_ID, 
	G.GEOGRAPHY_ID, G.REGION_NAME
FROM store_information S LEFT OUTER JOIN geography G
ON S.GEOGRAPHY_ID = G.GEOGRAPHY_ID
WHERE G.GEOGRAPHY_ID IS NULL;

-- 只取"右半邊未交集"的資料結果
SELECT S.STORE_ID, S.STORE_NAME, S.SALES, S.GEOGRAPHY_ID, 
	G.GEOGRAPHY_ID, G.REGION_NAME
FROM store_information S RIGHT OUTER JOIN geography G
ON S.GEOGRAPHY_ID = G.GEOGRAPHY_ID
WHERE S.GEOGRAPHY_ID IS NULL;

-- 只取"左右半邊未交集"的資料結果
/*
SELECT S.STORE_ID, S.STORE_NAME, S.SALES, S.GEOGRAPHY_ID, 
	G.GEOGRAPHY_ID, G.REGION_NAME
FROM store_information S FULL OUTER JOIN geography G
ON S.GEOGRAPHY_ID = G.GEOGRAPHY_ID
WHERE S.GEOGRAPHY_ID IS NULL
OR G.GEOGRAPHY_ID IS NULL;
*/

-- SQL 練習題(三)
-- 查詢各區域的營業額總計
-- 資料結果依營業額總計由大到小排序
-- (不論該區域底下是否有所屬商店)
SELECT  G.REGION_NAME, IFNULL(SUM(S.SALES), 0) "REGION_SUM_SALES"
FROM geography G
LEFT JOIN store_information S ON G.GEOGRAPHY_ID = S.GEOGRAPHY_ID
GROUP BY G.REGION_NAME
ORDER BY REGION_SUM_SALES DESC;

-- 查詢各區域的商店個數
-- 資料結果依區域的商店個數由大至小排序
-- (依據商店名稱,不包含重覆的商店)
-- (不論該區域底下是否有所屬商店)
SELECT G.REGION_NAME, COUNT(DISTINCT S.STORE_NAME) "STORE_COUNT"
FROM geography G
LEFT JOIN store_information S ON G.GEOGRAPHY_ID = S.GEOGRAPHY_ID
GROUP BY G.REGION_NAME
ORDER BY STORE_COUNT DESC;

SELECT CONCAT(STORE_ID, '/', STORE_NAME, '/', STORE_DATE) 
FROM store_information;

SELECT STORE_ID, STORE_NAME,
	SUBSTRING(STORE_NAME, 3),
    SUBSTRING(STORE_NAME, 1, 3)
FROM store_information;

SELECT STORE_ID, STORE_NAME, 
	LTRIM(STORE_NAME), RTRIM(STORE_NAME), TRIM(STORE_NAME)
FROM store_information;


SELECT * FROM store_information;

-- 1.INSERT 新增資料到資料表中
INSERT INTO store_information(STORE_ID, STORE_NAME, SALES, STORE_DATE, GEOGRAPHY_ID) 
	VALUES (10, 'Apple Store', 8800, '2024-06-29', 3);

-- 2.UPDATE 更改資料表中的資料
UPDATE store_information SET SALES = 8888, STORE_NAME = 'New Apple Store' WHERE STORE_ID = 10;

-- 3.DELETE 刪除資料表中的資料
DELETE FROM store_information  WHERE STORE_ID = 10;

-- 資料回滾(交易取消)
ROLLBACK;

-- COMMIT 資料提交(完成交易)
COMMIT;